
"""
1-my_list Module
====================

Importing the Class
--------------------

```python
>>> MyList = __import__("1-my_list").MyList
Checking for Module Docstring

>>> module_docstring = __import__("1-my_list").__doc__
>>> len(module_docstring) > 1
True
Checking for Class Docstring

>>> class_docstring = __import__("1-my_list").MyList.__doc__
>>> len(class_docstring) > 1
True
Checking for Method Docstring

>>> method_docstring = __import__("1-my_list").MyList.print_sorted.__doc__
>>> len(method_docstring) > 1
True
Checking Given Test Case

>>> my_list = MyList()

>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)

>>> print(my_list)
[1, 4, 2, 3, 5]

>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

>>> print(my_list)
[1, 4, 2, 3, 5]
Checking Empty Object

>>> obj1 = MyList()

>>> print(obj1)
[]

>>> obj1.print_sorted()
[]
Checking Negative Values

>>> obj2 = MyList()

>>> obj2.append(-1)
>>> obj2.append(0)
>>> obj2.append(-233)
>>> obj2.append(-9)

>>> print(obj2)
[-1, 0, -233, -9]

>>> obj2.print_sorted()
[-233, -9, -1, 0]
Checking NULL Object

>>> obj3 = MyList()

>>> try:
...     obj3.append(NULL)
... except NameError:
...     pass
...
>>> print(obj3)
[]

>>> obj3.print_sorted()
[]
Checking NaN Object

>>> obj4 = MyList()

>>> try:
...     obj4.append(NaN)
... except NameError:
...     pass
...
>>> print(obj4)
[]

>>> obj4.print_sorted()
[]
Checking None Object

>>> obj5 = MyList()

>>> obj5.append(None)

>>> print(obj5)
[None]

>>> obj5.print_sorted()
[None]
Note: The NULL and NaN values are expected to raise NameError as they are not defined in the given context.
"""

This consolidated documentation includes all the test cases along with improved formatting for better readability.
